services:
  - type: web
    name: {{ cookiecutter.project_slug }}-web
    runtime: python
    buildCommand: |
      pip install -r requirements.txt &&
      npm ci &&
      npm run build &&
      python manage.py collectstatic --noinput
    startCommand: python manage.py migrate && gunicorn {{ cookiecutter.project_slug }}.wsgi:application --bind 0.0.0.0:$PORT --workers 2 --threads 2 --timeout 120
    plan: free
    healthCheckPath: /

    envVars:
      - fromGroup: app-env
      - key: POSTGRES_DB
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: database
      - key: POSTGRES_USER
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: user
      - key: POSTGRES_PASSWORD
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: password
      - key: POSTGRES_HOST
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: host
      - key: POSTGRES_PORT
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: port
      - key: REDIS_HOST
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: host
      - key: REDIS_PORT
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: port
      - key: REDIS_PASSWORD
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: password

  - type: web
    name: {{ cookiecutter.project_slug }}-workers
    runtime: python
    buildCommand: |
      pip install -r requirements.txt
    startCommand: python manage.py qcluster & python -m http.server $PORT
    plan: free
    healthCheckPath: /

    envVars:
      - fromGroup: app-env
      - key: POSTGRES_DB
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: database
      - key: POSTGRES_USER
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: user
      - key: POSTGRES_PASSWORD
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: password
      - key: POSTGRES_HOST
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: host
      - key: POSTGRES_PORT
        fromDatabase:
          name: {{ cookiecutter.project_slug }}-db
          property: port
      - key: REDIS_HOST
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: host
      - key: REDIS_PORT
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: port
      - key: REDIS_PASSWORD
        fromService:
          type: keyvalue
          name: {{ cookiecutter.project_slug }}-redis
          property: password

  - type: keyvalue
    name: {{ cookiecutter.project_slug }}-redis
    plan: free
    ipAllowList: []
    maxmemoryPolicy: allkeys-lfu

databases:
  - name: {{ cookiecutter.project_slug }}-db
    databaseName: {{ cookiecutter.project_slug }}
    user: {{ cookiecutter.project_slug }}_user
    plan: free


envVarGroups:
  - name: app-env
    envVars:
      - key: PYTHON_VERSION
        value: "3.11.6"
      - key: ENVIRONMENT
        value: prod
      - key: DEBUG
        value: "False"
      - key: SECRET_KEY
        generateValue: true

      # Site URL - auto-generated by Render
      - key: SITE_URL
        value: $RENDER_EXTERNAL_URL

      {% if cookiecutter.use_s3 == 'y' %}
      # Optional. If not specified, local FileSystemStorage is used for media files.
      - key: AWS_S3_ENDPOINT_URL
        value: ""
      - key: AWS_ACCESS_KEY_ID
        value: ""
      - key: AWS_SECRET_ACCESS_KEY
        value: ""
      {% endif %}

      # Basic email setup - can be configured later
      - key: MAILGUN_API_KEY
        value: ""

      # Redis Database Number
      - key: REDIS_DB
        value: "0"
