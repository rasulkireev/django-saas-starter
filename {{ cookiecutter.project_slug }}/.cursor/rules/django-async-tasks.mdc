---
description:
globs: **/tasks.py
alwaysApply: false
---
-   **Avoid Passing `HttpRequest` to Async Tasks**
    -   Django's `HttpRequest` object is not "pickleable" (serializable) and cannot be passed directly to a background task in `django-q`. Doing so will result in a `TypeError: cannot pickle '_io.BufferedReader' object`. This is because the request object contains live resources like network streams that cannot be stored and recreated in another process.

-   **Pass Only Serializable Data**
    -   Instead of passing the entire `request` object, you must extract only the specific, serializable data that the task needs. This makes your task's dependencies explicit and guarantees it will work with the task queue.
    -   Common serializable data includes:
        -   User ID (`request.user.id`)
        -   Cookies (`request.COOKIES`)
        -   Session data (`request.session._session`)
        -   Specific GET/POST parameters
        -   Specific headers from `request.META`

-   **Benefits of this Approach**
    -   **Decoupling:** Your tasks become independent of the web request-response cycle. They can be called from views, management commands, or other tasks.
    -   **Testability:** Tasks are much easier to unit test, as you can pass simple data types instead of having to mock a complex `HttpRequest` object.
    -   **Robustness:** Avoids unexpected serialization errors if the `HttpRequest` object's internal structure changes in future Django versions.

-   **Example**

    -   ❌ **DON'T**: Pass the entire `request` object. This will fail.

        ```python
        # In a view method
        from django_q.tasks import async_task

        # This will raise a pickling error.
        async_task(
            'core.tasks.my_task',
            request=self.request
        )
        ```

    -   ✅ **DO**: Extract the necessary data and pass it to the task.

        ```python
        # In a view method
        from django_q.tasks import async_task

        user_id = self.request.user.id if self.request.user.is_authenticated else None
        cookies = self.request.COOKIES

        async_task(
            'core.tasks.my_task',
            user_id=user_id,
            cookies=cookies
        )
        ```

        And the corresponding task:

        ```python
        # In your tasks.py
        from django.contrib.auth import get_user_model

        User = get_user_model()

        def my_task(user_id, cookies):
            if user_id:
                try:
                    user = User.objects.get(id=user_id)
                    # ... do something with the user and cookies
                except User.DoesNotExist:
                    # handle case where user might not exist
                    pass
            # ...
        ```
