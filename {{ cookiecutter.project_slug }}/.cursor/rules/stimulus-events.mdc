---
description:
globs: *.js
alwaysApply: false
---
# Stimulus Controller Communication with Custom Events

When building complex applications with Stimulus, it's common to encounter scenarios where controllers need to communicate with each other. While Stimulus provides `outlets` for direct parent-child communication, this pattern doesn't work for sibling controllers or more decoupled components.

For these cases, a robust solution is to use custom DOM events. This approach promotes a loosely coupled architecture, making components more reusable and easier to maintain.

## The Pattern

The core idea is for one controller (the "actor") to dispatch a custom event when something happens, and for another controller (the "listener") to listen for that event and react accordingly.

### 1. Dispatching the Event

The actor controller creates and dispatches a `CustomEvent`. The event's `detail` object can carry a payload of data, such as the element to be moved or other relevant information.

See how this is implemented in `@archive_suggestion_controller.js`.

```javascript
// frontend/src/controllers/archive_suggestion_controller.js

// ...
        if (data.status === "success") {
          const message = archived ? "Suggestion archived successfully." : "Suggestion unarchived successfully.";
          showMessage(message, "success");

          const destination = archived ? "archived" : "active";
          const moveEvent = new CustomEvent("suggestion:move", {
            bubbles: true,
            detail: { element: this.element, destination: destination },
          });
          this.element.dispatchEvent(moveEvent);
        }
// ...
```

-   **`CustomEvent("suggestion:move", ...)`**: We create a new event named `suggestion:move`. The name should be descriptive of the action.
-   **`bubbles: true`**: This is important as it allows the event to bubble up the DOM tree, enabling ancestor elements (like `window` or `document`) to catch it.
-   **`detail: { ... }`**: This object contains the data we want to send. Here, we're passing the element to move and the name of the destination list.

### 2. Listening for the Event

The listener controller sets up an event listener in its `connect()` method and cleans it up in `disconnect()`. The listener is typically attached to `window` or `document` to catch bubbled events from anywhere on the page.

This is demonstrated in `@archived_list_controller.js`.

```javascript
// frontend/src/controllers/archived_list_controller.js

// ...
  connect() {
    this.boundMove = this.move.bind(this);
    window.addEventListener("suggestion:move", this.boundMove);
  }

  disconnect() {
    window.removeEventListener("suggestion:move", this.boundMove);
  }

  move(event) {
    const { element, destination } = event.detail;
    if (this.nameValue === destination) {
      this.add(element);
    }
  }
// ...
```

-   **`connect()` and `disconnect()`**: These Stimulus lifecycle callbacks are the perfect place to add and remove global event listeners, preventing memory leaks.
-   **`this.boundMove = this.move.bind(this)`**: We bind the `move` method to ensure `this` refers to the controller instance when the event is handled.
-   **`if (this.nameValue === destination)`**: The listener inspects the event's `detail` payload to decide if it should act. In this case, it checks if its own `name` value matches the `destination` from the event.

### 3. HTML Markup

With this event-based approach, the HTML becomes cleaner. There's no need for `data-*-outlet` attributes to link the controllers. Each controller is self-contained.

The `archive-suggestion` controller is on an individual suggestion in `@blog_suggestion.html`, while the `archived-list` controllers are on the lists in `@blogging-agent.html`.
