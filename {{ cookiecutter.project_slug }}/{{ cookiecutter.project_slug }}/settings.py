"""
Django settings for {{ cookiecutter.project_slug }} project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
import environ
import structlog
{% if cookiecutter.use_sentry == 'y' -%}
import logging
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.redis import RedisIntegration
from structlog_sentry import SentryProcessor
{% endif %}
{% if cookiecutter.use_logfire == 'y' -%}
import logfire
from {{ cookiecutter.project_slug }}.logging_utils import scrubbing_callback
{% endif %}


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(BASE_DIR / ".env")

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Options: dev, prod
ENVIRONMENT = env("ENVIRONMENT")

{% if cookiecutter.use_logfire == 'y' -%}
LOGFIRE_TOKEN = env("LOGFIRE_TOKEN", default="")
if LOGFIRE_TOKEN:
    logfire.configure(
        environment=ENVIRONMENT,
        scrubbing=logfire.ScrubbingOptions(callback=scrubbing_callback),
    )
{%- endif %}

{% if cookiecutter.use_sentry == 'y' -%}
SENTRY_DSN = env("SENTRY_DSN", default="")
{% endif %}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

SITE_URL = env("SITE_URL")

# Remove the port from the SITE_URL and the https prefix (mostly for dev)
ALLOWED_HOSTS = [SITE_URL.replace("http://", "").replace("https://", "").split(":")[0]]

CSRF_TRUSTED_ORIGINS = [SITE_URL]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.sitemaps",
    "webpack_boilerplate",
    "widget_tweaks",
    "anymail",
    {% if cookiecutter.use_stripe == 'y' -%}
    "djstripe",
    {% endif %}
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "django_q",
    "django_extensions",
    {% if cookiecutter.use_mjml == 'y' -%}
    "mjml",
    {% endif %}
    "django_structlog",
    "core.apps.CoreConfig",
    {% if cookiecutter.generate_blog == 'y' -%}
    "blog.apps.BlogConfig",
    {% endif %}
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "django_structlog.middlewares.RequestMiddleware",
]

ROOT_URLCONF = "{{ cookiecutter.project_slug }}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR.joinpath("frontend", "templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.current_state",
                {% if cookiecutter.use_posthog == 'y' -%}
                "core.context_processors.posthog_api_key",
                {% endif %}
                "core.context_processors.available_social_providers",
            ],
        },
    },
]

WSGI_APPLICATION = "{{ cookiecutter.project_slug }}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

POSTGRES_DB = env("POSTGRES_DB")
POSTGRES_USER = env("POSTGRES_USER")
POSTGRES_PASSWORD = env("POSTGRES_PASSWORD")
POSTGRES_HOST = env("POSTGRES_HOST")
POSTGRES_PORT = env("POSTGRES_PORT", default="5432")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = BASE_DIR.joinpath("static/")

STATICFILES_DIRS = [
    BASE_DIR.joinpath("frontend/build"),
]

folder_name = f"{{ cookiecutter.project_slug }}-{ENVIRONMENT}"
aws_s3_endpoint_url = env("AWS_S3_ENDPOINT_URL", default="")

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

if not aws_s3_endpoint_url:
    MEDIA_URL = f"/media/"
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
            "OPTIONS": {
                "location": MEDIA_ROOT,
            },
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }
else:
    MEDIA_URL = f"{aws_s3_endpoint_url}/{folder_name}/"
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "bucket_name": folder_name,
                "default_acl": "public-read",
                "region_name": "eu-east-1",
                "endpoint_url": aws_s3_endpoint_url,
                "access_key": env("AWS_ACCESS_KEY_ID"),
                "secret_key": env("AWS_SECRET_ACCESS_KEY"),
                "querystring_auth": False,
                "file_overwrite": False,
            },
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

WEBPACK_LOADER = {
    "MANIFEST_FILE": BASE_DIR.joinpath("frontend/build/manifest.json"),
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
SITE_ID = 1

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

LOGIN_REDIRECT_URL = "home"
ACCOUNT_LOGOUT_REDIRECT_URL = "landing"

ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_FORMS = {
    "signup": "core.forms.CustomSignUpForm",
    "login": "core.forms.CustomLoginForm",
}
if ENVIRONMENT != "dev":
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"

SOCIALACCOUNT_PROVIDERS = {}

GITHUB_CLIENT_ID = env("GITHUB_CLIENT_ID", default="")
if GITHUB_CLIENT_ID != "":
    SOCIALACCOUNT_PROVIDERS["github"] = {
        "VERIFIED_EMAIL": True,
        "EMAIL_AUTHENTICATION": True,
        "AUTO_SIGNUP": True,
        "APP": {
            "client_id": env("GITHUB_CLIENT_ID"),
            "secret": env("GITHUB_CLIENT_SECRET"),
        },
    }

MAILGUN_API_KEY = env("MAILGUN_API_KEY", default="")
ANYMAIL = {
    "MAILGUN_API_KEY": MAILGUN_API_KEY,
    "MAILGUN_SENDER_DOMAIN": "mg.{{ cookiecutter.project_slug }}.app",
}
DEFAULT_FROM_EMAIL = "Rasul from {{ cookiecutter.project_name }} <hello@{{ cookiecutter.project_slug }}.app>"
SERVER_EMAIL = "{{ cookiecutter.project_name }} Errors <error@{{ cookiecutter.project_slug }}.app>"

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "mailhog"  # Use the service name from docker-compose
    EMAIL_PORT = 1025
    EMAIL_USE_TLS = False
    EMAIL_HOST_USER = ""
    EMAIL_HOST_PASSWORD = ""
else:
    if MAILGUN_API_KEY == "":
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    else:
        EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"

REDIS_HOST = env("REDIS_HOST", default="localhost")
REDIS_PORT = env("REDIS_PORT", default="6379")
REDIS_PASSWORD = env("REDIS_PASSWORD", default="")
REDIS_DB = env("REDIS_DB", default="0")
REDIS_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"

Q_CLUSTER = {
    "name": "{{ cookiecutter.project_slug }}-q",
    "timeout": 90,
    "retry": 120,
    "workers": 4,
    "max_attempts": 2,
    "redis": REDIS_URL,
    "error_reporter": {},
}

def extract_from_record(logger, name, event_dict):
    """
    Extract thread name and add them to the event dict.
    """
    record = event_dict["_record"]
    event_dict["thread_id"] = record.thread
    return event_dict

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "%(levelname)s %(message)s"},
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
        },
        "json": {"format": "%(message)s"},
        "json_formatter": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processors": [
                extract_from_record,
                structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                structlog.processors.JSONRenderer(),
            ],
        },
        "plain_console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
        "key_value": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.KeyValueRenderer(
                key_order=["timestamp", "level", "event", "logger"]
            ),
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "plain_console",
            "level": "DEBUG",
        },
        "prod_console": {
            "class": "logging.StreamHandler",
            "formatter": "plain_console",
            "level": "DEBUG",
        },
        "json_console": {
            "class": "logging.StreamHandler",
            "formatter": "json_formatter",
            "level": "DEBUG",
        },
    },
    "loggers": {
        "django_structlog": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
        # django.server can log some low-level logs, but also does log requests,
        # for some reason...
        "django.server": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "ERROR",  # so we don't chunder 404s, etc
            "propagate": False,
        },
        "{{ cookiecutter.project_slug }}": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

structlog_processors = [
    structlog.contextvars.merge_contextvars,
    structlog.stdlib.filter_by_level,
    structlog.processors.TimeStamper(fmt="iso"),
    structlog.stdlib.add_logger_name,
    structlog.stdlib.add_log_level,
    structlog.stdlib.PositionalArgumentsFormatter(),
    structlog.processors.StackInfoRenderer(),
    # structlog.processors.format_exc_info,
]

{% if cookiecutter.use_sentry == 'y' -%}
if SENTRY_DSN:
    structlog_processors.append(
        SentryProcessor(
            event_level=logging.ERROR,
            level=logging.INFO,
            active=True,
            as_context=True,
            tag_keys="__all__",
            verbose=True,
        )
    )
{% endif %}

{% if cookiecutter.use_logfire == 'y' -%}
if LOGFIRE_TOKEN:
    structlog_processors.append(logfire.StructlogProcessor())
{% endif %}

structlog_processors.extend(
    [
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ]
)

structlog.configure(
    processors=structlog_processors,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

if ENVIRONMENT == "prod":
    LOGGING["loggers"]["django.server"]["level"] = "WARNING"
    LOGGING["loggers"]["django_structlog"]["handlers"].append("json_console")
    LOGGING["loggers"]["{{ cookiecutter.project_slug }}"]["level"] = env("DJANGO_LOG_LEVEL", default="INFO")
    LOGGING["loggers"]["{{ cookiecutter.project_slug }}"]["handlers"].append("json_console")

{% if cookiecutter.use_sentry == 'y' -%}
if SENTRY_DSN:
    Q_CLUSTER["error_reporter"]["sentry"] = {"dsn": SENTRY_DSN}
    sentry_sdk.init(
        debug=DEBUG,
        dsn=SENTRY_DSN,
        environment=ENVIRONMENT,
        send_default_pii=False,
        traces_sample_rate=1,
        profile_session_sample_rate=1,
        profile_lifecycle="trace",
        integrations=[
            DjangoIntegration(),
            RedisIntegration(),
        ],
        disabled_integrations=[
            LoggingIntegration(),
        ],
        attach_stacktrace=True,
        include_local_variables=True,
    )
{% endif %}

{% if cookiecutter.use_posthog == 'y' -%}
POSTHOG_API_KEY = env("POSTHOG_API_KEY", default="")
{% endif %}

{% if cookiecutter.use_buttondown == 'y' -%}
BUTTONDOWN_API_KEY=env("BUTTONDOWN_API_KEY", default="")
{% endif %}

{% if cookiecutter.use_stripe == 'y' -%}
STRIPE_LIVE_SECRET_KEY = env("STRIPE_LIVE_SECRET_KEY", default="")
STRIPE_TEST_SECRET_KEY = env("STRIPE_TEST_SECRET_KEY", default="")

STRIPE_LIVE_MODE = False
STRIPE_SECRET_KEY = STRIPE_TEST_SECRET_KEY
if ENVIRONMENT == "prod":
    STRIPE_LIVE_MODE = True
    STRIPE_SECRET_KEY = STRIPE_LIVE_SECRET_KEY

DJSTRIPE_WEBHOOK_SECRET = env("DJSTRIPE_WEBHOOK_SECRET", default="")
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"
{% endif %}

{% if cookiecutter.use_mjml == 'y' -%}
MJML_BACKEND_MODE = "httpserver"
MJML_HTTPSERVERS = [
    {
        "URL": "https://api.mjml.io/v1/render",
        "HTTP_AUTH": (env('MJML_APPLICATION_ID'), env("MJML_SECRET")),
    }
]
{% endif %}
